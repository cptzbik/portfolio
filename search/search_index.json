{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Micha\u0142 Kotowski","text":"<p>Data Scientist | AI Developer | ML Engineer</p> <p>My name is Micha\u0142 Kotowski. For almost a year, I have been developing my passion for data analysis, artificial intelligence, and machine learning, consistently building both theoretical knowledge and practical experience in data science projects. I am particularly interested in using data to create solutions that support real business processes \u2013 from exploratory data analysis, through predictive modeling, to deploying ML and AI models in practice.</p> <p>Recently, I became a member of the Masterclass group, where I collaborate on creating modern solutions based on artificial intelligence, machine learning, and advanced data analytics. Participation in this environment allows me not only to develop technical skills but also to gain experience working in teams on projects with high innovative potential.</p> <p>My goal is to further expand my competencies in machine learning, deep learning, and data engineering, as well as to build projects that combine business value with modern technologies. I am characterized by curiosity, consistency, and a desire for continuous improvement \u2013 I believe that properly used data can become the foundation for better decisions and innovative solutions.</p>"},{"location":"#education-certificates","title":"\ud83c\udf93 Education &amp; Certificates","text":"<ul> <li>\ud83c\udf93 Secondary - Specialized high school (Information Management)</li> <li>\ud83c\udfc6 Certificates - Data Science GOTOIT - Become a Data Scientist from Scratch</li> <li>\ud83c\udfaf Online courses - Work in AI: Become a Data Scientist from Scratch, Masterclass</li> </ul>"},{"location":"#technical-skills","title":"\ud83d\udee0\ufe0f Technical Skills","text":""},{"location":"#programming-languages","title":"\ud83d\udc0d Programming languages","text":"<ul> <li>Python</li> <li>SQL</li> </ul>"},{"location":"#aiml-data-science","title":"\ud83e\udd16 AI/ML &amp; Data Science","text":"<ul> <li>OpenAI API, PyCaret, Scikit-learn</li> <li>Pandas, NumPy, Plotly</li> </ul>"},{"location":"#frameworks-libraries","title":"\u269b\ufe0f Frameworks &amp; Libraries","text":"<ul> <li>Streamlit, Langfuse</li> </ul>"},{"location":"#databases-vector-db","title":"\ud83d\uddc4\ufe0f Databases &amp; Vector DB","text":"<ul> <li>Qdrant, SQL</li> </ul>"},{"location":"#cloud-devops","title":"\u2601\ufe0f Cloud &amp; DevOps","text":"<ul> <li>Digital Ocean, AWS</li> </ul>"},{"location":"#other-tools","title":"\ud83d\udd27 Other tools","text":"<ul> <li>Git, GitHub, JSON, Pathlib</li> </ul>"},{"location":"#experience","title":"\ud83d\udcbc Experience","text":""},{"location":"#masterclass-currently","title":"\ud83d\ude80 Masterclass (Currently)","text":"<ul> <li>Member of the group for modern AI/ML solutions</li> <li>Collaboration on projects with high innovative potential</li> <li>Development of technical and teamwork skills</li> </ul>"},{"location":"#my-projects","title":"\ud83d\ude80 My Projects","text":""},{"location":"#nalagpt","title":"NalaGPT","text":"<p>NalaGPT is a simple chatbot application based on the OpenAI GPT-4o model, built with Streamlit. It allows users to chat with a bot that has a customizable personality (e.g., meows like a cat and asks for treats). The user can change the conversation name, chatbot personality, and manage multiple conversations, which are saved locally in JSON files.</p> <p>Key features:</p> <ul> <li>Customizable chatbot personality</li> <li>Management of multiple conversations</li> <li>Conversation cost tracking (USD/PLN)</li> <li>Behavior personalization</li> <li>Local data storage</li> </ul> <p>Technologies: <code>Streamlit</code> <code>OpenAI API</code> <code>dotenv</code> <code>JSON</code> <code>Pathlib</code> <code>Python</code></p>"},{"location":"#iris-data-analysis","title":"Iris Data Analysis","text":"<p>Exploratory data analysis (EDA) of the classic Iris dataset. The project includes: - Statistical summary and visualization of features (sepal/petal length and width) - Class distribution and feature correlation analysis - Outlier detection and comparison between species - Visualizations: scatter plots, histograms, boxplots This project demonstrates how to analyze and visualize biological data for classification tasks.</p>"},{"location":"#titanic-survival-prediction","title":"Titanic Survival Prediction","text":"<p>Exploratory data analysis (EDA) and survival prediction for Titanic passengers. The project covers: - Data cleaning, missing value handling, and feature engineering - Analysis of survival rates by gender, class, age, and family status - Visualizations: class/age/fare distributions, survival by feature - Preparation for machine learning modeling This project provides insights into the main factors affecting survival and prepares the data for predictive modeling.</p>"},{"location":"#half-marathon-time-estimator","title":"\ud83c\udfc3 Half Marathon Time Estimator","text":"<p>An intelligent web application using machine learning to predict half marathon (21.097 km) completion time based on runner data. It combines advanced AI/ML technologies with a user-friendly interface.</p> <p>Key features:</p> <ul> <li>Intelligent natural language processing (OpenAI GPT-3.5)</li> <li>Automatic ML model download from the cloud (Digital Ocean)</li> <li>Half marathon time prediction by Gradient Boosting Regressor</li> <li>Smart time format conversion</li> <li>Monitoring and metrics via Langfuse</li> </ul> <p>Technologies: <code>Streamlit</code> <code>PyCaret</code> <code>OpenAI GPT-3.5</code> <code>Digital Ocean</code> <code>Langfuse</code> <code>Python</code></p>"},{"location":"#achievements-certificates","title":"\ud83c\udfc6 Achievements &amp; Certificates","text":"<ul> <li>[Completed 4+ data science/AI projects] - [Description/year]</li> <li>[Member of the Masterclass AI/ML group] - [Description/year]</li> <li>[Built and deployed multiple AI-powered web applications] - [Description/year]</li> <li>[ Data Science GOTOIT \u2013 Become a Data Scientist from Scratch] Data Science GOTOIT - Become a Data Scientist from Scratch</li> </ul>"},{"location":"#statistics-metrics","title":"\ud83d\udcca Statistics &amp; Metrics","text":"<ul> <li>Projects completed: 4+</li> <li>Lines of code: [Add if you want]</li> <li>Commits on GitHub: [Add if you want]</li> <li>Collaboration: Masterclass Team</li> </ul>"},{"location":"#what-makes-me-stand-out","title":"\u2728 What Makes Me Stand Out","text":"<ul> <li>Consistency \u2013 consistently developing skills for a year</li> <li>Practical approach \u2013 combining theory with real business projects</li> <li>Curiosity \u2013 constantly seeking new solutions</li> <li>Teamwork \u2013 experience in group projects</li> <li>Innovation \u2013 using the latest AI/ML technologies</li> </ul>"},{"location":"#contact-social-media","title":"\ud83d\udcde Contact &amp; Social Media","text":"<ul> <li>\ud83d\udce7 Email: [cptzbik2@gmail.com]</li> <li>\ud83d\udcbc LinkedIn: [add LinkedIn link]</li> <li>\ud83d\udc19 GitHub: [add GitHub link]</li> <li>\ud83c\udf10 Portfolio: [link to this portfolio]</li> </ul>"},{"location":"#career-goal","title":"\ud83c\udfaf Career Goal","text":"<ul> <li>Position: Senior Data Scientist or ML Engineer</li> <li>Specializations:<ul> <li>Advanced machine learning models</li> <li>Deploying AI solutions in production</li> <li>Data engineering and MLOps</li> <li>Creating business solutions based on AI</li> </ul> </li> </ul>"},{"location":"#call-to-action","title":"\ud83d\udce5 Call to Action","text":"<ul> <li>[\ud83d\udccb Download CV] \u2013 [link to your CV if available]</li> <li>[\ud83d\ude80 See more projects] \u2013 [link to GitHub]</li> <li>[\ud83d\udcac Contact me] \u2013 [link to contact form]</li> <li>[\ud83d\udcca GitHub Portfolio] \u2013 [link to portfolio on GitHub Pages]</li> </ul> <p>Ostatnia aktualizacja: [Data]</p>"},{"location":"audio_notes_v6/","title":"Audio Notes App","text":""},{"location":"audio_notes_v6/#application-description","title":"Application Description","text":"<p>A web application that allows users to record, transcribe, and analyze audio notes using advanced speech-to-text and AI technologies. The app supports Polish language, extracts structured data from voice, and provides a user-friendly interface for managing and processing audio notes.</p>"},{"location":"audio_notes_v6/#technologies-used","title":"\ud83d\udee0\ufe0f Technologies Used","text":"<p>Frontend &amp; Framework: - Streamlit \u2013 main framework for building the web interface - HTML/CSS \u2013 styling and layout</p> <p>Backend &amp; AI/ML: - Python 3.8+ \u2013 main programming language - OpenAI Whisper \u2013 speech-to-text transcription - OpenAI GPT-4o \u2013 Large Language Model for extracting and analyzing data</p> <p>Audio &amp; Data Processing: - audiorecorder \u2013 voice recording in the browser - Pandas \u2013 data manipulation and analysis - re, json, ast \u2013 text and data extraction</p> <p>Configuration &amp; Security: - Python-dotenv \u2013 environment variable management - Environment variables \u2013 secure storage of API keys</p>"},{"location":"audio_notes_v6/#main-application-features","title":"\ud83d\ude80 Main Application Features","text":"<ul> <li>Audio note recording</li> <li>Record voice notes directly in the browser</li> <li> <p>Save and playback audio</p> </li> <li> <p>Speech-to-text transcription</p> </li> <li>Transcribe Polish audio to text using OpenAI Whisper</li> <li> <p>Display and edit transcriptions</p> </li> <li> <p>Data extraction and analysis</p> </li> <li>Extract structured data (age, gender, BMI, etc.) from transcribed text</li> <li> <p>Use OpenAI GPT-4o for advanced data extraction and suggestions</p> </li> <li> <p>Insurance cost estimation</p> </li> <li>Predict health insurance costs based on extracted data</li> <li> <p>Provide actionable tips to reduce costs</p> </li> <li> <p>User-friendly interface</p> </li> <li>Real-time feedback, error handling, and clear instructions</li> <li>Sidebar for quick access to recording and results</li> </ul>"},{"location":"audio_notes_v6/#example-usage","title":"\ud83d\udca1 Example usage","text":"<pre><code>User records: \"Mam 35 lat, jestem m\u0119\u017cczyzn\u0105, BMI 27, nie pal\u0119, mieszkam w po\u0142udniowym zachodzie.\"\n\nApplication:\n1. Transcribes the audio to text\n2. Extracts: age=35, sex=male, bmi=27, smoker=no, region=southwest\n3. Predicts insurance cost and provides suggestions\n4. Displays results and potential savings\n</code></pre>"},{"location":"audio_notes_v6/#architecture","title":"\ud83d\udd27 Architecture","text":"<ul> <li>Modular structure with separate functions for recording, transcription, extraction, and prediction</li> <li>Integration with OpenAI Whisper and GPT-4o for speech-to-text and data analysis</li> <li>Secure API key management via environment variables</li> <li>Automatic error handling and validation for user input</li> </ul>"},{"location":"audio_notes_v6/#business-value","title":"\ud83c\udfaf Business Value","text":"<p>This application demonstrates how speech recognition and AI can be combined to automate data entry, extract structured information from voice, and deliver personalized insights. It is a practical example of using generative AI and speech-to-text in health and insurance domains.</p>"},{"location":"audio_notes_v6/#links","title":"\ud83d\udd17 Links","text":"<ul> <li>\ud83d\udc19 Source code: https://github.com/cptzbik/apka_do_notatek</li> </ul>"},{"location":"find_friends_v3/","title":"Find Friends App","text":""},{"location":"find_friends_v3/#application-description","title":"Application Description","text":"<p>A web application that helps users find and connect with friends based on shared interests and location. The app uses AI to suggest potential friends, analyze user profiles, and provide a seamless experience for building social connections.</p>"},{"location":"find_friends_v3/#technologies-used","title":"\ud83d\udee0\ufe0f Technologies Used","text":"<p>Frontend &amp; Framework: - Streamlit \u2013 main framework for building the web interface - HTML/CSS \u2013 styling and layout</p> <p>Backend &amp; AI/ML: - Python 3.8+ \u2013 main programming language - OpenAI GPT-4o \u2013 Large Language Model for analyzing user interests and generating suggestions</p> <p>Data Processing: - Pandas \u2013 data manipulation and analysis - re, json \u2013 text and data extraction</p> <p>Configuration &amp; Security: - Python-dotenv \u2013 environment variable management - Environment variables \u2013 secure storage of API keys</p>"},{"location":"find_friends_v3/#main-application-features","title":"\ud83d\ude80 Main Application Features","text":"<ul> <li>User profile creation</li> <li> <p>Users can create and edit profiles with interests, location, and preferences</p> </li> <li> <p>AI-powered friend suggestions</p> </li> <li>Uses GPT-4o to analyze profiles and suggest potential friends</li> <li> <p>Matches users based on shared interests and proximity</p> </li> <li> <p>Search and filter</p> </li> <li>Search for friends by interest, location, or keywords</li> <li> <p>Filter results for more relevant matches</p> </li> <li> <p>User-friendly interface</p> </li> <li>Real-time feedback, error handling, and clear instructions</li> <li>Simple navigation and profile management</li> </ul>"},{"location":"find_friends_v3/#example-usage","title":"\ud83d\udca1 Example usage","text":"<pre><code>User enters: \"I love hiking, photography, and live in Warsaw. Looking for friends with similar interests.\"\n\nApplication:\n1. Analyzes the user's profile and interests\n2. Suggests friends in Warsaw who also enjoy hiking and photography\n3. Displays a list of potential matches with contact options\n</code></pre>"},{"location":"find_friends_v3/#architecture","title":"\ud83d\udd27 Architecture","text":"<ul> <li>Modular structure with separate functions for profile management, matching, and suggestions</li> <li>Integration with OpenAI GPT-4o for profile analysis and friend recommendations</li> <li>Secure API key management via environment variables</li> <li>Automatic error handling and validation for user input</li> </ul>"},{"location":"find_friends_v3/#business-value","title":"\ud83c\udfaf Business Value","text":"<p>This application demonstrates how AI can enhance social networking by providing personalized, data-driven friend suggestions. It showcases the use of generative AI for real-world social and community-building scenarios.</p>"},{"location":"find_friends_v3/#links","title":"\ud83d\udd17 Links","text":"<ul> <li>\ud83d\udc19 Source code: https://github.com/cptzbik/find_friends</li> </ul>"},{"location":"halfmaraton/","title":"\ud83c\udfc3 Half Marathon Time Estimator","text":""},{"location":"halfmaraton/#application-description","title":"Application Description","text":"<p>This is an intelligent web application that uses machine learning to predict half marathon (21.097 km) completion time based on runner data. The application combines advanced AI/ML technologies with a user-friendly interface.</p> <p> Application interface \u2013 the user can describe themselves naturally, and the AI will automatically extract key information</p>"},{"location":"halfmaraton/#technologies-used","title":"\ud83d\udee0\ufe0f Technologies Used","text":"<p>Frontend &amp; Framework: - Streamlit \u2013 main framework for building the web interface - HTML/CSS \u2013 styling and layout</p> <p>Backend &amp; AI/ML: - Python 3.8+ \u2013 main programming language - PyCaret \u2013 library for automating machine learning - Gradient Boosting Regressor \u2013 ML model for time prediction - OpenAI GPT-3.5-turbo \u2013 Large Language Model for natural language processing</p> <p>Cloud &amp; Storage: - Digital Ocean Spaces \u2013 storage for the ML model and resources - Boto3 \u2013 AWS S3 client for communication with Digital Ocean Spaces - Langfuse \u2013 monitoring and metrics for LLM</p> <p>Data Processing: - Pandas \u2013 data manipulation and analysis - NumPy \u2013 numerical computations</p> <p>Configuration &amp; Security: - Python-dotenv \u2013 environment variable management - Environment variables \u2013 secure storage of API keys</p>"},{"location":"halfmaraton/#main-application-features","title":"\ud83d\ude80 Main Application Features","text":""},{"location":"halfmaraton/#intelligent-natural-language-processing","title":"Intelligent natural language processing","text":"<ul> <li>The user describes themselves naturally (e.g., \"I am a man, I am 30 years old and I ran 5 km in 22:30\")</li> <li>The LLM automatically extracts key information: gender, age, 5 km time</li> </ul>"},{"location":"halfmaraton/#automatic-ml-model-download","title":"Automatic ML model download","text":"<ul> <li>The model is always up to date \u2013 downloaded from the cloud at each launch</li> <li>No need to manually update the model locally</li> </ul>"},{"location":"halfmaraton/#half-marathon-time-prediction","title":"Half marathon time prediction","text":"<ul> <li>The ML model analyzes the input data and predicts the half marathon completion time</li> <li>The result is presented in a readable format (hours, minutes, seconds)</li> </ul>"},{"location":"halfmaraton/#intelligent-time-format-conversion","title":"Intelligent time format conversion","text":"<ul> <li>Supports various time input formats (mm:ss, minutes seconds, number of minutes)</li> <li>Automatic conversion to the format required by the model</li> </ul>"},{"location":"halfmaraton/#monitoring-and-metrics","title":"Monitoring and metrics","text":"<ul> <li>Integration with Langfuse for tracking LLM performance</li> <li>Collecting data on the quality of natural language processing</li> </ul>"},{"location":"halfmaraton/#error-handling-and-validation","title":"Error handling and validation","text":"<ul> <li>Checking completeness of input data</li> <li>Clear error messages and missing information alerts</li> </ul>"},{"location":"halfmaraton/#example-usage","title":"\ud83d\udca1 Example usage","text":"<pre><code>User enters: \"I am a woman, I am 28 years old, and my 5km time is 25 minutes\"\n\nApplication:\n1. Extracts: gender=0 (female), age=28, 5km_pace=5.0 min/km\n2. Passes data to the ML model\n3. Returns the predicted half marathon time\n4. Displays the result in the format \"2h 15min 30s\"\n</code></pre>"},{"location":"halfmaraton/#architecture","title":"\ud83d\udd27 Architecture","text":"<ul> <li>Modular structure with separate functions for each task</li> <li>Langfuse decorators for monitoring LLM performance</li> <li>Secure API key management via environment variables</li> <li>Automatic deployment via Digital Ocean App Platform</li> </ul>"},{"location":"halfmaraton/#business-value","title":"\ud83c\udfaf Business Value","text":"<p>This application demonstrates advanced integration of various AI/ML technologies in a practical solution, combining natural language processing with machine learning prediction. It is an example of real-world AI application in sports and health, showing how data can be used for personalization and training optimization.</p>"},{"location":"halfmaraton/#links","title":"\ud83d\udd17 Links","text":"<ul> <li>\ud83d\ude80 App demo: https://maratonik-app-hnu3v.ondigitalocean.app/</li> <li>\ud83d\udc19 Source code: https://github.com/cptzbik/halfmaraton</li> </ul>"},{"location":"insurance/","title":"Insurance Cost Estimator","text":""},{"location":"insurance/#application-description","title":"Application Description","text":"<p>An intelligent web application that predicts health insurance costs based on user data and provides personalized, AI-powered suggestions to reduce premiums. The app supports both manual and voice input, calculates BMI, and explains how to lower your insurance costs.</p>"},{"location":"insurance/#technologies-used","title":"\ud83d\udee0\ufe0f Technologies Used","text":"<p>Frontend &amp; Framework: - Streamlit \u2013 main framework for building the web interface - HTML/CSS \u2013 styling and layout</p> <p>Backend &amp; AI/ML: - Python 3.8+ \u2013 main programming language - PyCaret \u2013 library for automating machine learning - OpenAI GPT-4o \u2013 Large Language Model for generating suggestions - Whisper \u2013 speech-to-text transcription</p> <p>Audio &amp; Data Processing: - audiorecorder \u2013 voice recording in the browser - Pandas \u2013 data manipulation and analysis</p> <p>Configuration &amp; Security: - Python-dotenv \u2013 environment variable management - Environment variables \u2013 secure storage of API keys</p>"},{"location":"insurance/#main-application-features","title":"\ud83d\ude80 Main Application Features","text":"<ul> <li> <p>Health insurance cost prediction</p> <ul> <li>Predicts insurance costs using a trained machine learning model</li> <li>Supports both manual and voice (audio) input</li> </ul> </li> <li> <p>BMI calculation</p> <ul> <li>Calculates and displays BMI based on user input</li> <li>Provides feedback on BMI value</li> </ul> </li> <li> <p>Personalized suggestions</p> <ul> <li>Uses OpenAI GPT-4o to generate actionable tips for lowering insurance costs</li> <li>Compares current and improved scenarios (e.g., lower BMI, non-smoker)</li> </ul> </li> <li> <p>Speech-to-text transcription</p> <ul> <li>Converts voice notes to text using Whisper</li> <li>Extracts relevant data from natural language</li> </ul> </li> <li> <p>User-friendly interface</p> <ul> <li>Real-time feedback and clear error messages</li> <li>Sidebar for voice input and quick calculations</li> </ul> </li> </ul>"},{"location":"insurance/#example-usage","title":"\ud83d\udca1 Example usage","text":"<pre><code>User enters or records: \"I am a 40-year-old man, BMI 29, 2 children, smoker, living in the southeast.\"\n\nApplication:\n1. Extracts: age=40, sex=male, bmi=29, children=2, smoker=yes, region=southeast\n2. Predicts insurance cost using the ML model\n3. Suggests improvements (e.g., lower BMI, quit smoking)\n4. Shows potential savings and actionable tips\n</code></pre>"},{"location":"insurance/#architecture","title":"\ud83d\udd27 Architecture","text":"<ul> <li>Modular structure with separate functions for prediction, transcription, and data extraction</li> <li>Integration with OpenAI GPT-4o and Whisper for suggestions and speech-to-text</li> <li>Secure API key management via environment variables</li> <li>Automatic error handling and validation for user input</li> </ul>"},{"location":"insurance/#business-value","title":"\ud83c\udfaf Business Value","text":"<p>This application demonstrates how AI and machine learning can be used to personalize health insurance cost predictions and provide actionable, user-specific advice. It showcases the integration of speech recognition, data extraction, and generative AI in a real-world scenario.</p>"},{"location":"insurance/#links","title":"\ud83d\udd17 Links","text":"<ul> <li>\ud83d\udc19 Source code: https://github.com/cptzbik/insurance</li> </ul>"},{"location":"iris/","title":"Iris EDA Data Analysis","text":"<p>This notebook presents an exploratory data analysis (EDA) of the famous Iris flower dataset. It includes:</p> <ul> <li>A description of the dataset, including the characteristics of the three Iris species and a description of the features (sepal length and width, petal length and width).</li> <li>Loading the data and checking its completeness and basic statistics.</li> <li>Analysis of the number of samples in each class and the distributions of features.</li> <li>Checking for missing values and confirming that the data is complete.</li> <li>Correlation analysis between features with a visualization of the correlation matrix.</li> <li>Visualizations of feature distributions and comparisons between species (scatter plots, histograms, boxplots).</li> <li>Identification of outliers.</li> <li>Summary of the most important observations regarding differences between Iris species.</li> </ul> <p>This notebook is an example of a classic EDA, showing step by step how to explore and visualize biological data.</p> <p>Download Notebook</p> <p></p>"},{"location":"nalagpt/","title":"NalaGPT","text":"<p># NalaGPT - Chatbot Application with OpenAI</p>"},{"location":"nalagpt/#application-description","title":"Application Description","text":"<p>NalaGPT is an intelligent chatbot based on OpenAI technology that simulates a conversation with a cat. The application allows users to have conversations with AI, which are saved and can be reloaded later.</p>"},{"location":"nalagpt/#main-features","title":"Main Features","text":""},{"location":"nalagpt/#cat-personality-chatbot","title":"\ud83d\udc31 Cat Personality Chatbot","text":"<ul> <li>Default personality: The chatbot behaves like a cat \u2013 meows, asks for treats</li> <li>Customizable personality: The user can change the chatbot's personality in the sidebar</li> <li>Conversation memory: The bot remembers previous messages (last 25)</li> </ul>"},{"location":"nalagpt/#conversation-management","title":"\ud83d\udcac Conversation Management","text":"<ul> <li>Create new conversations: Ability to start a new conversation thread</li> <li>Switch between conversations: Load previous conversations</li> <li>Naming: Each conversation can have its own name</li> <li>History: All messages are saved locally</li> </ul>"},{"location":"nalagpt/#cost-tracking","title":"\ud83d\udcb0 Cost Tracking","text":"<ul> <li>Token calculation: Counts input/output tokens</li> <li>Costs in USD and PLN: Converts according to the current rate (1 USD = 3.97 PLN)</li> <li>AI models: Supports GPT-4o and GPT-4o-mini with different prices</li> </ul>"},{"location":"nalagpt/#secure-api-key-management","title":"\ud83d\udd10 Secure API Key Management","text":"<ul> <li>.env file: Automatically loads the key from the environment file</li> <li>Fallback UI: If there is no .env file, the user can enter the key</li> <li>Session state: The key is saved in Streamlit session memory</li> </ul>"},{"location":"nalagpt/#technologies","title":"Technologies","text":""},{"location":"nalagpt/#backend","title":"\ud83d\udc0d Backend","text":"<ul> <li>Python 3.x: Main programming language</li> <li>Streamlit: Framework for building web applications</li> <li>OpenAI API: Integration with GPT language models</li> </ul>"},{"location":"nalagpt/#database","title":"\ud83d\udcc1 Database","text":"<ul> <li>JSON: Stores conversations in JSON files</li> <li>File-based storage: Local files instead of a database</li> <li>Directory structure:</li> <li><code>naszgpt_db/</code> - main database directory</li> <li><code>conversations/</code> - conversation files</li> <li><code>current.json</code> - currently active conversation</li> </ul>"},{"location":"nalagpt/#libraries-and-dependencies","title":"\ud83d\udcda Libraries and Dependencies","text":"<pre><code>streamlit          # User interface\nopenai            # OpenAI API client\npython-dotenv     # Loading environment variables\npathlib           # File path operations\njson              # Data serialization\n</code></pre>"},{"location":"nalagpt/#architecture","title":"\ud83c\udf10 Architecture","text":"<ul> <li>Single-page application: Everything in one Streamlit file</li> <li>Session management: User state management</li> <li>File I/O: File operations for data storage</li> <li>Error handling: API error handling and data validation</li> </ul>"},{"location":"nalagpt/#code-structure","title":"Code Structure","text":""},{"location":"nalagpt/#1-configuration-and-pricing","title":"1. Configuration and Pricing","text":"<ul> <li>Definition of AI model prices</li> <li>Currency rate configuration</li> <li>Default settings</li> </ul>"},{"location":"nalagpt/#2-api-key-management","title":"2. API Key Management","text":"<ul> <li>Function <code>get_openai_api_key()</code></li> <li>Checking the .env file</li> <li>Fallback UI for the user</li> </ul>"},{"location":"nalagpt/#3-chatbot","title":"3. Chatbot","text":"<ul> <li>Function <code>get_chatbot_reply()</code></li> <li>Integration with OpenAI API</li> <li>Message system handling</li> </ul>"},{"location":"nalagpt/#4-conversation-database","title":"4. Conversation Database","text":"<ul> <li><code>load_current_conversation()</code> - loads the current conversation</li> <li><code>save_current_conversation_messages()</code> - saves messages</li> <li><code>create_new_conversation()</code> - creates a new conversation</li> <li><code>switch_conversation()</code> - switches between conversations</li> </ul>"},{"location":"nalagpt/#5-user-interface","title":"5. User Interface","text":"<ul> <li>Main chat with message history</li> <li>Sidebar with controls and statistics</li> <li>Conversation management</li> </ul>"},{"location":"nalagpt/#security","title":"Security","text":"<ul> <li>API keys: Never committed to Git (thanks to .gitignore)</li> <li>Data validation: Checks JSON file correctness</li> <li>Error handling: Graceful error handling without crashing</li> <li>Session isolation: Each user has their own session</li> </ul>"},{"location":"nalagpt/#extension-possibilities","title":"Extension Possibilities","text":"<ul> <li>More AI models: Add other OpenAI models</li> <li>Conversation export: PDF, TXT, JSON</li> <li>Search: Search conversation history</li> <li>Multiple users: Login and authorization system</li> <li>Backup: Cloud synchronization</li> </ul>"},{"location":"nalagpt/#launch","title":"Launch","text":"<pre><code># Install dependencies\npip install -r requirements.txt\n\n# Run the application\nstreamlit run app.py\n</code></pre> <p>The application will automatically create the necessary directories and files on first launch.</p>"},{"location":"nalagpt/#links","title":"\ud83d\udd17 Links","text":"<ul> <li>\ud83d\ude80 App demo: https://nalagpt.streamlit.app/</li> <li>\ud83d\udc19 Source code: https://github.com/cptzbik/nalagpt</li> </ul>"},{"location":"titanic/","title":"Titanic EDA Data Analysis","text":"<p>This notebook presents an exploratory data analysis (EDA) of the Titanic passengers dataset. It includes a description of the dataset, an initial data quality analysis (missing values, duplicates), basic statistics about the passengers (number of women, men, average ticket price, number of people boarding at each port), as well as visualizations of class, age, and ticket price distributions.</p> <p>In the further part of the notebook, relationships between passenger features and their chances of surviving the disaster are analyzed \u2013 including the impact of gender, travel class, age, and traveling with family on survival. The results are presented in the form of charts and short text summaries.</p> <p>Download Notebook</p> <p></p>"}]}